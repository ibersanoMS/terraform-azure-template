name: "Deploy Terraform Infrastructure"

on:
  push: 
    branches: [main]

env:
  TerraformWorkingDirectory: "./src/infra"
  StateStoreRGName: ${{ vars.STATE_STORE_RGNAME }}
  StorageAccountName: ${{ vars.STORAGE_ACCOUNT_NAME }}
  StateStoreContainerName: ${{ vars.STATE_STORAGE_CONTAINER_NAME }}
  StateStoreFilename: ${{ vars.STATE_STORE_FILENAME }}
  DestroyTerraform: ${{ vars.DESTROY_TERRAFORM }}
  Location: ${{ vars.LOCATION}}
  CreateStateStore: ${{ vars.CREATE_STATE_STORE}}

permissions:
      id-token: write
      contents: read

jobs:
  deploy:
    name: "Terraform Deploy"
    runs-on: ubuntu-latest
    
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4      

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3    
        with: 
          terraform_wrapper: false

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform Remote State Store
        if: ${{ env.CreateStateStore == 'true' }}
        shell: pwsh
        working-directory: "./.github/scripts/StateStore"
        run: ./setupStateStore.ps1 -resourceGroupName ${{ env.StateStoreRGName}} -location ${{ env.Location}} -storageAccountName ${{ env.StorageAccountName }}
            
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init -backend-config=resource_group_name=${{ env.StateStoreRGName}} -backend-config=storage_account_name=${{ env.StorageAccountName }} -backend-config=container_name=${{ env.StateStoreContainerName }} -backend-config=key=${{ env.StateStoreFilename }}
        working-directory: ${{ env.TerraformWorkingDirectory }}
        env:
             ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
             ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID  }}
             ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
             ARM_USE_OIDC: true

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -out=tf_plan -var-file="variables.tfvars"
        working-directory: ${{ env.TerraformWorkingDirectory }}
        env:
             ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
             ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID  }}
             ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
             ARM_USE_OIDC: true

        # On push to master, build or change infrastructure according to Terraform configuration files
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve tf_plan
        working-directory: ${{ env.TerraformWorkingDirectory }}
        env:
             ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
             ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID  }}
             ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
             ARM_USE_OIDC: true
  
  destroy:
    name: "Terraform Destroy"
    runs-on: ubuntu-latest
    needs: deploy
    if: ${{ vars.DestroyTerraform == 'true' }}
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4      

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3  

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init -backend-config=resource_group_name=${{ env.StateStoreRGName}} -backend-config=storage_account_name=${{ env.StorageAccountName }} -backend-config=container_name=${{ env.StateStoreContainerName }} -backend-config=key=${{ env.StateStoreFilename }}
        working-directory: ${{ env.TerraformWorkingDirectory }}

      - name: Terraform Destroy
        run: terraform destroy -auto-approve -input=false -parallelism=20 -var-file="variables.tfvars"
        working-directory: ${{ env.TerraformWorkingDirectory }}

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Delete Terraform State File
        run: |
            Try
            {
              $exists = az storage blob exists --account-name ${{ env.StorageAccountName }} --container-name ${{ env.StateStoreContainerName }} --name ${{ env.StateStoreFilename }} --auth-mode login
            }
            Catch
            {
              Write-output "No state file to delete"
            }
